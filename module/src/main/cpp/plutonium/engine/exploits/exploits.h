namespace engine
{
    class exploits
    {
    private:
        static exploits *instance;
        plutonium_t     *_cheat;

    public:
        static exploits *create()
        {
            instance          = _g_cheat.load()->_allocator->calloc<exploits>();
            instance->_cheat  = _g_cheat.load();

            return instance;
        }
    };

    exploits *exploits::instance{};

    void (*orig_fmod_runtime_manager_ongui_helper__ongui)(void *_this);
    void fmod_runtime_manager_ongui_helper__ongui(void *_this)
    {
        //тут короче чет отрисовать можно через методы в юнити еще и пропадание менюшки зафиксится
        orig_fmod_runtime_manager_ongui_helper__ongui(_this);
    }

    void hk_player_snapshot__serialize(axlebolt::player_snapshot *snapshot, void *stream)
    {
        if (menu::vars.bools.enable_invisible_exploit)
        {
            //snapshot->weaponry->weapon_type = 1;

            auto items_list = snapshot->weaponry->items;
            for (int i{}; i < items_list->count; i++)
            {
                axlebolt::weapon_slot_item *item = items_list->array->items[i];
                if (item)
                {
                    item->slot = 0;
                    item->skin_id = 0;
                    item->owner = -1;
                    item->weapon_id = 51;
                }
            }
        }

        axlebolt::player_snapshot::serialize(snapshot, stream);
    }
}